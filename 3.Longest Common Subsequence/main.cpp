#include <iostream>
#include <cstring>
#include <stack>

using namespace std;
const int N = 1002;
char s1[N],s2[N];
int len1,len2;//x y 字符串的长度
int c[N][N];
int i,j;

/*
2019年1月18日 16点22分
最长公共子序列

算法：动态规划
数据结构：一个len1*len2的数组
复杂度:
    填表复杂度:len1*len2
    回溯的复杂度:len1+len2
    注意：如果只需要求最长公共子序列的长度 则可以使用滚动数组 此时空间复杂度就是min(len1,len2)



1.字符串比较类的问题 首先想到的思路是 自顶往下思考（也就是从后往前比较字符串）

2.思路一：减治法
    看两个字符串最末尾两个字符是否相等
        如果相等 则将两个末尾字符去掉，此时只需要求前面的字符串的最长公共子串 然后+1
        如果不等 则去掉其中一个字串的末尾字符 比较两种去掉末尾字符的情况，选择一种最长的公共子串的情况 此时原字符串的最长公共子串就是当前求出的最长公共子串的长度
    注意：1.其中不等的情形 又分为两种选择情况，运用了分治法(分为两个更小问题)
          2.该方法最坏情况就是每一个都不相等，也就是说每次都是第二种情况
           4 5
          |    |
         35   44
        |  |  |  |
       25 34  34 43
     |   |
    15  24
    子问题一共是2的9次方  但是其中有大量的重复 独立子问题数量就是4*5 =  20种


3.dp方程:(dp方程还是递归的时候想出来的 自顶往下思考)
    c[i,j] = c[i-1,j-1]                 当x[i] = y[i]
           = max(c[i-1,j],c[i,j-1])     当x[i] != y[i]

4.根据上面的递归树 可以感觉到 表是二维数组 两边分别是 4 和 5

5.自顶往下会出现爆炸 所以自底往上填表(当然自底往上的思路不是太好理解 此时也不需要再理解 直接使用dp方程即可)


编程技巧:
    1.输入字符串
    2.获取字符串的长度

*/

//自底往上
void LCS(){
    //初始化数组 0行 0列赋0
    for(i=0;i<=len1;i++){
        c[i][0] = 0;
    }
    for(i=1;i<=len2;i++){
        c[0][i] = 0;
    }

    //使用dp方程  一行一行计算  len1是行数 len2是列数
    for(i=1;i<=len1;i++){
        for(j=1;j<=len2;j++){
            if(s1[i-1]==s2[j-1]) c[i][j] = c[i-1][j-1]+1;
            else c[i][j] = max(c[i-1][j],c[i][j-1]);
        }
    }

}

//打印LCS
/*
思路：从最后一格开始 i,j
        如果s1[i] = s2[j] 则将s1[i]放入栈 前往c[i-1][j-1]
        如果 不等 则比较c[i-1][j] c[i][j-1] 谁大 前往该格

数据结构：栈
*/
void print(int x,int y){
    if(x==0||y==0) return;
    if(s1[x-1]==s2[y-1]){
        print(x-1,y-1);
        cout<<s1[x-1];
    }else if(c[x-1][y]>c[x][y-1]){
        print(x-1,y);
    }else{
        print(x,y-1);
    }
}

int main()
{
    cout<<"输入字符串s1"<<endl;
    cin>>s1;
    cout<<"输入字符串s2"<<endl;
    cin>>s2;  // ! 使用char数组存储字符串的方法

    //得到两个字符串的长度
    len1 = strlen(s1); // 使用<cstring> 中的strlen计算字符串长度
    len2 = strlen(s2);
    LCS();
    cout << "最大长度为:" <<c[len1][len2]<< endl;
    cout << "字符串为:";
    print(len1,len2);
    return 0;
}
